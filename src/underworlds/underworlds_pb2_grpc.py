# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import underworlds_pb2 as underworlds__pb2


class UnderworldsStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.helo = channel.unary_unary(
        '/underworlds.Underworlds/helo',
        request_serializer=underworlds__pb2.Welcome.SerializeToString,
        response_deserializer=underworlds__pb2.Client.FromString,
        )
    self.byebye = channel.unary_unary(
        '/underworlds.Underworlds/byebye',
        request_serializer=underworlds__pb2.Client.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )
    self.uptime = channel.unary_unary(
        '/underworlds.Underworlds/uptime',
        request_serializer=underworlds__pb2.Client.SerializeToString,
        response_deserializer=underworlds__pb2.Time.FromString,
        )
    self.topology = channel.unary_unary(
        '/underworlds.Underworlds/topology',
        request_serializer=underworlds__pb2.Client.SerializeToString,
        response_deserializer=underworlds__pb2.Topology.FromString,
        )
    self.reset = channel.unary_unary(
        '/underworlds.Underworlds/reset',
        request_serializer=underworlds__pb2.Client.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )
    self.getNodesLen = channel.unary_unary(
        '/underworlds.Underworlds/getNodesLen',
        request_serializer=underworlds__pb2.Context.SerializeToString,
        response_deserializer=underworlds__pb2.Size.FromString,
        )
    self.getNodesIds = channel.unary_unary(
        '/underworlds.Underworlds/getNodesIds',
        request_serializer=underworlds__pb2.Context.SerializeToString,
        response_deserializer=underworlds__pb2.Nodes.FromString,
        )
    self.getRootNode = channel.unary_unary(
        '/underworlds.Underworlds/getRootNode',
        request_serializer=underworlds__pb2.Context.SerializeToString,
        response_deserializer=underworlds__pb2.Node.FromString,
        )
    self.getNode = channel.unary_unary(
        '/underworlds.Underworlds/getNode',
        request_serializer=underworlds__pb2.NodeInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Node.FromString,
        )
    self.updateNodes = channel.unary_unary(
        '/underworlds.Underworlds/updateNodes',
        request_serializer=underworlds__pb2.NodesInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )
    self.deleteNodes = channel.unary_unary(
        '/underworlds.Underworlds/deleteNodes',
        request_serializer=underworlds__pb2.NodesInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )
    self.getSituationsLen = channel.unary_unary(
        '/underworlds.Underworlds/getSituationsLen',
        request_serializer=underworlds__pb2.Context.SerializeToString,
        response_deserializer=underworlds__pb2.Size.FromString,
        )
    self.getSituationsIds = channel.unary_unary(
        '/underworlds.Underworlds/getSituationsIds',
        request_serializer=underworlds__pb2.Context.SerializeToString,
        response_deserializer=underworlds__pb2.Situations.FromString,
        )
    self.getSituation = channel.unary_unary(
        '/underworlds.Underworlds/getSituation',
        request_serializer=underworlds__pb2.SituationInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Situation.FromString,
        )
    self.timelineOrigin = channel.unary_unary(
        '/underworlds.Underworlds/timelineOrigin',
        request_serializer=underworlds__pb2.Context.SerializeToString,
        response_deserializer=underworlds__pb2.Time.FromString,
        )
    self.updateSituations = channel.unary_unary(
        '/underworlds.Underworlds/updateSituations',
        request_serializer=underworlds__pb2.SituationsInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )
    self.deleteSituations = channel.unary_unary(
        '/underworlds.Underworlds/deleteSituations',
        request_serializer=underworlds__pb2.SituationsInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )
    self.hasMesh = channel.unary_unary(
        '/underworlds.Underworlds/hasMesh',
        request_serializer=underworlds__pb2.MeshInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Bool.FromString,
        )
    self.getMesh = channel.unary_unary(
        '/underworlds.Underworlds/getMesh',
        request_serializer=underworlds__pb2.MeshInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Mesh.FromString,
        )
    self.pushMesh = channel.unary_unary(
        '/underworlds.Underworlds/pushMesh',
        request_serializer=underworlds__pb2.MeshInContext.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )


class UnderworldsServicer(object):

  def helo(self, request, context):
    """GENERAL

    Establish the connection to the server, setting a human-friendly name for
    the client.
    The server returns a unique client ID that must be used in every subsequent
    request to the server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def byebye(self, request, context):
    """Inform the server that the client is disconnecting.
    Before completing this call, the client must keep its invalidation
    server open and listening.
    After completing this call, the server should not attempt to connect to
    the client's invalidation server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def uptime(self, request, context):
    """Returns the uptime of the server, in seconds
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def topology(self, request, context):
    """Returns the current topology of underworlds: the list of worlds and the
    list of clients + their interactions with the worlds
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def reset(self, request, context):
    """Hard reset of Underworlds: all the worlds are deleted.
    The existing mesh database is kept, however.
    This does not impact the list of known clients (ie, clients do not have to
    call 'helo' again).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getNodesLen(self, request, context):
    """NODES

    Returns the number of nodes in a given world.
    Accepts a context (client ID and world) and returns the number of existing nodes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getNodesIds(self, request, context):
    """Returns the list of node IDs present in the given world
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getRootNode(self, request, context):
    """Returns the root node ID of the given world
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getNode(self, request, context):
    """Returns a node from its ID in the given world.
    Note that only the node ID is used (and thus, required).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateNodes(self, request, context):
    """Updates (and broadcasts to all client) nodes in a given world
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteNodes(self, request, context):
    """Deletes (and broadcasts to all client) nodes in a given world
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getSituationsLen(self, request, context):
    """TIMELINE

    Returns the number of situations in a given world.
    Accepts a context (client ID and world) and returns the number of
    existing situations.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getSituationsIds(self, request, context):
    """Returns the list of situation IDs present in the given world
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getSituation(self, request, context):
    """Returns a situation from its ID.
    Note that only the situation ID is used (and thus, required).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def timelineOrigin(self, request, context):
    """Returns the timeline origin: time of the timeline creation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateSituations(self, request, context):
    """Updates (and broadcasts to all client) a situation in a given world
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteSituations(self, request, context):
    """Deletes (and broadcasts to all client) a node in a given world
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def hasMesh(self, request, context):
    """MESHES

    Returns whether the given mesh is already available on the server.
    Note that only the mesh ID is used.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getMesh(self, request, context):
    """Returns a 3D mesh.
    Note that only the ID of the input mesh is used.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def pushMesh(self, request, context):
    """Sends a 3D mesh to the server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UnderworldsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'helo': grpc.unary_unary_rpc_method_handler(
          servicer.helo,
          request_deserializer=underworlds__pb2.Welcome.FromString,
          response_serializer=underworlds__pb2.Client.SerializeToString,
      ),
      'byebye': grpc.unary_unary_rpc_method_handler(
          servicer.byebye,
          request_deserializer=underworlds__pb2.Client.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
      'uptime': grpc.unary_unary_rpc_method_handler(
          servicer.uptime,
          request_deserializer=underworlds__pb2.Client.FromString,
          response_serializer=underworlds__pb2.Time.SerializeToString,
      ),
      'topology': grpc.unary_unary_rpc_method_handler(
          servicer.topology,
          request_deserializer=underworlds__pb2.Client.FromString,
          response_serializer=underworlds__pb2.Topology.SerializeToString,
      ),
      'reset': grpc.unary_unary_rpc_method_handler(
          servicer.reset,
          request_deserializer=underworlds__pb2.Client.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
      'getNodesLen': grpc.unary_unary_rpc_method_handler(
          servicer.getNodesLen,
          request_deserializer=underworlds__pb2.Context.FromString,
          response_serializer=underworlds__pb2.Size.SerializeToString,
      ),
      'getNodesIds': grpc.unary_unary_rpc_method_handler(
          servicer.getNodesIds,
          request_deserializer=underworlds__pb2.Context.FromString,
          response_serializer=underworlds__pb2.Nodes.SerializeToString,
      ),
      'getRootNode': grpc.unary_unary_rpc_method_handler(
          servicer.getRootNode,
          request_deserializer=underworlds__pb2.Context.FromString,
          response_serializer=underworlds__pb2.Node.SerializeToString,
      ),
      'getNode': grpc.unary_unary_rpc_method_handler(
          servicer.getNode,
          request_deserializer=underworlds__pb2.NodeInContext.FromString,
          response_serializer=underworlds__pb2.Node.SerializeToString,
      ),
      'updateNodes': grpc.unary_unary_rpc_method_handler(
          servicer.updateNodes,
          request_deserializer=underworlds__pb2.NodesInContext.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
      'deleteNodes': grpc.unary_unary_rpc_method_handler(
          servicer.deleteNodes,
          request_deserializer=underworlds__pb2.NodesInContext.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
      'getSituationsLen': grpc.unary_unary_rpc_method_handler(
          servicer.getSituationsLen,
          request_deserializer=underworlds__pb2.Context.FromString,
          response_serializer=underworlds__pb2.Size.SerializeToString,
      ),
      'getSituationsIds': grpc.unary_unary_rpc_method_handler(
          servicer.getSituationsIds,
          request_deserializer=underworlds__pb2.Context.FromString,
          response_serializer=underworlds__pb2.Situations.SerializeToString,
      ),
      'getSituation': grpc.unary_unary_rpc_method_handler(
          servicer.getSituation,
          request_deserializer=underworlds__pb2.SituationInContext.FromString,
          response_serializer=underworlds__pb2.Situation.SerializeToString,
      ),
      'timelineOrigin': grpc.unary_unary_rpc_method_handler(
          servicer.timelineOrigin,
          request_deserializer=underworlds__pb2.Context.FromString,
          response_serializer=underworlds__pb2.Time.SerializeToString,
      ),
      'updateSituations': grpc.unary_unary_rpc_method_handler(
          servicer.updateSituations,
          request_deserializer=underworlds__pb2.SituationsInContext.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
      'deleteSituations': grpc.unary_unary_rpc_method_handler(
          servicer.deleteSituations,
          request_deserializer=underworlds__pb2.SituationsInContext.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
      'hasMesh': grpc.unary_unary_rpc_method_handler(
          servicer.hasMesh,
          request_deserializer=underworlds__pb2.MeshInContext.FromString,
          response_serializer=underworlds__pb2.Bool.SerializeToString,
      ),
      'getMesh': grpc.unary_unary_rpc_method_handler(
          servicer.getMesh,
          request_deserializer=underworlds__pb2.MeshInContext.FromString,
          response_serializer=underworlds__pb2.Mesh.SerializeToString,
      ),
      'pushMesh': grpc.unary_unary_rpc_method_handler(
          servicer.pushMesh,
          request_deserializer=underworlds__pb2.MeshInContext.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'underworlds.Underworlds', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class UnderworldsInvalidationStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.emitInvalidation = channel.unary_unary(
        '/underworlds.UnderworldsInvalidation/emitInvalidation',
        request_serializer=underworlds__pb2.Invalidation.SerializeToString,
        response_deserializer=underworlds__pb2.Empty.FromString,
        )


class UnderworldsInvalidationServicer(object):

  def emitInvalidation(self, request, context):
    """Sends (to the client's invalidation server) 'invalidated'
    nodes/situations that need to be updated.  Invalidated nodes/situations
    can be new nodes/situations, nodes/situations that have changed, or
    nodes/situations that have been removed (see Invalidation.type).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UnderworldsInvalidationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'emitInvalidation': grpc.unary_unary_rpc_method_handler(
          servicer.emitInvalidation,
          request_deserializer=underworlds__pb2.Invalidation.FromString,
          response_serializer=underworlds__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'underworlds.UnderworldsInvalidation', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
